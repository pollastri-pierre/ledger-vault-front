#!/bin/bash

#                   ██╗   ██╗ █████╗ ██╗   ██╗██╗  ████████╗
#                   ██║   ██║██╔══██╗██║   ██║██║  ╚══██╔══╝
#                   ██║   ██║███████║██║   ██║██║     ██║
#                   ╚██╗ ██╔╝██╔══██║██║   ██║██║     ██║
#                    ╚████╔╝ ██║  ██║╚██████╔╝███████╗██║
#                     ╚═══╝  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝

# exit on errors
set -e

# directory where repos will be cloned
VAULT_WORKSPACE=${VAULT_WORKSPACE:-$HOME/.vault}

function usage() {
  echo "usage:"
  echo "  vault -h                             display this help message."
  echo "  vault -e                             display vault env"
  echo "  vault                                start vault-integration"
  echo "  vault -i <scenario> [...scenarios]   init and start vault-integration, and eventually run given scenario(s)"
  echo "  vault -s <scenario> [...scenarios]   run given scenario(s)"
  echo ""
  echo "available scenarios are:"
  list_scenarios
}

function main () {
  create_default_scenarios

  SHOULD_RESET=0
  SHOULD_RUN=0
  ONLY_SCENARIO=0

  while getopts ":heis" opt; do
    case ${opt} in
      e )
        display_env
        exit 0
        ;;
      h )
        usage
        exit 0
        ;;
      i )
        SHOULD_RESET=1
        SHOULD_RUN=1
        ;;
      s )
        SHOULD_RUN=1
        ONLY_SCENARIO=1
        ;;
      \? )
        echo "invalid option: -$OPTARG. see vault -h" 1>&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))

  if [[ "$ONLY_SCENARIO" == "0" ]]; then
    ensure_env_fetched
  fi

  if [[ "$SHOULD_RESET" == "1" ]]; then
    stop_containers
    down_containers
    reset_compartment
    sync_containers
  fi

  if [[ "$ONLY_SCENARIO" == "0" ]]; then
    up_containers
    wait_up_gate
  fi

  if [[ "$SHOULD_RUN" == "1" ]]; then
    # loop on scripts
    while (( "$#" )); do
      run_scenario "$1"
      shift
    done
  fi

  notify-send \
    -u critical \
    -i ~/dotfiles/assets/rick.png \
    "Finished 👌" "Vault ready to go! 🚀"
}

function run_scenario() {
  cd "$VAULT_WORKSPACE/ledger-vault-api/tests/integration"
  if ! [[ -d venv ]]; then
    python3 -m venv venv
    (
      # shellcheck disable=SC1091
      source venv/bin/activate
      pip install -r requirements.txt
    )
  fi
  (
    # shellcheck disable=SC1091
    source venv/bin/activate
    bash "$VAULT_WORKSPACE/scenarios/$1"
  )
  cd - &>/dev/null
}

function stop_containers() {
  cd "$VAULT_WORKSPACE/vault-integration"
  docker-compose stop --timeout 1
  cd - &>/dev/null
}

function down_containers() {
  cd "$VAULT_WORKSPACE/vault-integration"
  docker-compose down --remove-orphans
  cd - &>/dev/null
}

function up_containers() {
  cd "$VAULT_WORKSPACE/vault-integration"
  docker-compose up --build -d
  cd - &>/dev/null
}

function sync_containers() {
  cd "$VAULT_WORKSPACE/vault-integration"
  docker-compose pull
  cd - &>/dev/null
}

function wait_up_gate() {
  printf "\e[34m- waiting for gate... \e[0m"
  while true; do
    if curl --connect-timeout 0.2 http://localhost:5000/ledger1/_health &>/dev/null ; then
      break
    fi
    printf "."
    sleep 0.2
  done
  echo "[OK]"
}

function reset_compartment() {
  hsmaas init --compartment-id "$VAULT_COMPARTMENT_ID" --clean
}

function display_env() {
  show_env VAULT_COMPARTMENT_ID 34
  show_env VAULT_HSM_ENDPOINT 32
  show_env VAULT_API_VERSION 35
  show_env HSM_DRIVER_VERSION 35
  show_env DEVICE_API_VERSION 35
  show_env WALLET_DAEMON_VERSION 35
}

function ensure_env_fetched() {
  mkdir -p "$VAULT_WORKSPACE"
  if ! command -v hsmaas &>/dev/null; then
    echo "hsmaas not found. installing..."
    pip3 install git+ssh://git@github.com/LedgerHQ/vault-scripts.git@master --user
  fi
  display_env
  sync_repo vault-integration         master
  sync_repo ledger-vault-api          "$VAULT_API_VERSION"
}

function create_default_scenarios() {
  mkdir -p "$VAULT_WORKSPACE/scenarios"
  echo "$SCENARIO_ONBOARDING" > "$VAULT_WORKSPACE/scenarios/onboarding"
  echo "$SCENARIO_STATE_1" > "$VAULT_WORKSPACE/scenarios/state-1"
}

function list_scenarios() {
  for filename in "$VAULT_WORKSPACE"/scenarios/*; do
    printf "  %-22s%s\n" "$(basename "$filename")" "$(cat "$filename" | grep DESC | sed 's/^# DESC //g')"
  done
}

function ensure_set() {
  if [[ "${!1}" == "" ]]; then
    printf "\e[31merror: \$%s is not set\e[0m\n" "$1"
    exit 1
  fi
}

function sync_repo() {
  printf "\e[34m- syncing %s on branch \e[35m%s\e[34m... \e[0m" "$1" "$2"
  cd "$VAULT_WORKSPACE"
  if ! [[ -d "$1" ]]; then
    git clone "git@github.com:LedgerHQ/$1.git" >/dev/null
  fi
  cd "$1"
  branch=$(git branch | grep '\*' | cut -d ' ' -f 2)
  if [[ $branch != "$2" ]]; then
    git fetch >/dev/null
    git checkout "$2" >/dev/null
  fi
  git pull >/dev/null
  cd "$OLDPWD"
  echo "[OK]"
}

function show_env() {
  ensure_set "$1"
  printf "%-25s\033[%sm%s\033[0m\n" "$1" "$2" "${!1}"
}

read -r -d '' SCENARIO_ONBOARDING << EOF || true
# DESC Simple onboarding. Fresh start. 3 admins.

python test_onboarding.py
EOF

read -r -d '' SCENARIO_STATE_1 << EOF || true
# DESC Create & approve 12 operators.

python test_user_creation.py --user 3 --approve
python test_user_creation.py --user 4 --approve
python test_user_creation.py --user 5 --approve
python test_user_creation.py --user 6 --approve
python test_user_creation.py --user 7 --approve
python test_user_creation.py --user 8 --approve
python test_user_creation.py --user 9 --approve
python test_user_creation.py --user 10 --approve
python test_user_creation.py --user 11 --approve
python test_user_creation.py --user 12 --approve
python test_user_creation.py --user 13 --approve
python test_user_creation.py --user 14 --approve
EOF

main "$@"
