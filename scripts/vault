#!/bin/bash

#                   ██╗   ██╗ █████╗ ██╗   ██╗██╗  ████████╗
#                   ██║   ██║██╔══██╗██║   ██║██║  ╚══██╔══╝
#                   ██║   ██║███████║██║   ██║██║     ██║
#                   ╚██╗ ██╔╝██╔══██║██║   ██║██║     ██║
#                    ╚████╔╝ ██║  ██║╚██████╔╝███████╗██║
#                     ╚═══╝  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝
#
#                       General purpose dev utility

# exit on errors
set -e

# directory where repos will be cloned
VAULT_WORKSPACE_DIR=${VAULT_WORKSPACE_DIR:-$HOME/.vault}

function usage() {
  echo -e "\033[2m"
  echo "    \`8.\`888b           ,8' .8.       8 8888      88 8 8888   8888888 8888888888"
  echo "     \`8.\`888b         ,8' .888.      8 8888      88 8 8888         8 8888      "
  echo "      \`8.\`888b       ,8' :88888.     8 8888      88 8 8888         8 8888      "
  echo "       \`8.\`888b     ,8' . \`88888.    8 8888      88 8 8888         8 8888      "
  echo "        \`8.\`888b   ,8' .8. \`88888.   8 8888      88 8 8888         8 8888      "
  echo "         \`8.\`888b ,8' .8\`8. \`88888.  8 8888      88 8 8888         8 8888      "
  echo "          \`8.\`888b8' .8' \`8. \`88888. 8 8888      88 8 8888         8 8888      "
  echo "           \`8.\`888' .8'   \`8. \`88888.\` 8888     ,8P 8 8888         8 8888      "
  echo "            \`8.\`8' .888888888. \`88888. 8888   ,d8P  8 8888         8 8888      "
  echo "             \`8.\` .8'       \`8. \`88888. \`Y88888P'   8 888888888888 8 8888      "
  echo ""
  echo -e "\033[0m"

  echo -e "\033[1m=> HELP COMMANDS\033[0m"
  echo ""
  echo "   yarn vault -h                                 display this help message."
  echo "   yarn vault -e                                 display vault env"

  echo ""
  echo -e "\033[1m=> RUN & MANAGE BACKEND\033[0m"
  echo ""
  echo "   yarn vault                                    start (or restart) vault backend on previous state"
  echo "   yarn vault -i                                 reset & restart vault backend"
  echo -e "   yarn vault -i \033[34m<scenario> [...scenarios]\033[39m       reset vault backend and run given scenario(s)"
  echo -e "   yarn vault -s \033[34m<scenario> [...scenarios]\033[39m       only run given scenario(s)"
  echo ""
  echo "  => Available scenarios are:"
  echo ""
  list_scenarios

  echo ""
  echo -e "\033[1m=> MANAGE FIRMWARE & APPS ON BLUE DEVICE\033[0m"
  echo ""
  echo -e "   yarn vault -f \033[33m<prev-firm> <next-firm>\033[39m         install firmware on Blue device"
  echo -e "                                                 \033[2me.g: yarn vault -f 2.2.4-ee 2.2.5-eed\033[0m"
  echo ""
}

function main () {
  copy_scenarios

  SHOULD_RESET=0
  SHOULD_RUN=0
  ONLY_SCENARIO=0

  while getopts ":heisf" opt; do
    case ${opt} in
      e )
        display_env
        exit 0
        ;;
      h )
        usage
        exit 0
        ;;
      i )
        SHOULD_RESET=1
        SHOULD_RUN=1
        ;;
      s )
        SHOULD_RUN=1
        ONLY_SCENARIO=1
        ;;
      f )
        install_firmware "$2" "$3"
        exit 0
        ;;
      \? )
        echo "invalid option: -$OPTARG. see vault -h" 1>&2
        exit 1
        ;;
    esac
  done
  shift $((OPTIND -1))

  if [[ "$ONLY_SCENARIO" == "0" ]]; then
    ensure_env_fetched
  fi

  vault_compose

  if [[ "$SHOULD_RESET" == "1" ]]; then
    stop_containers
    down_containers
    reset_compartment
    sync_containers
  fi

  if [[ "$ONLY_SCENARIO" == "0" ]]; then
    up_containers
    wait_up_containers
  fi

  if [[ "$SHOULD_RUN" == "1" ]]; then
    # loop on scripts
    while (( "$#" )); do
      run_scenario "$1"
      shift
    done
  fi

  notifyReady
}

function notifyReady() {
  [[ $(uname) == "Linux" ]]  && notify-send -u critical -i ~/dotfiles/assets/rick.png "Finished 👌" "Vault ready to go! 🚀"
  [[ $(uname) == "Darwin" ]]  && osascript -e 'display notification "Vault ready to go!"'
  return 0
}

function run_scenario() {
  cd "$VAULT_WORKSPACE_DIR/ledger-vault-api/tests/integration"
  if ! [[ -d venv ]]; then
    python3 -m venv venv
    (
      # shellcheck disable=SC1091
      source venv/bin/activate
      pip install -r requirements.txt
    )
  fi
  (
    # shellcheck disable=SC1091
    source venv/bin/activate
    bash "$VAULT_WORKSPACE_DIR/scenarios/$1"
  )
  cd - &>/dev/null
}

function stop_containers() {
  cd "$VAULT_WORKSPACE_DIR/vault-integration"
  docker-compose stop --timeout 1
  cd - &>/dev/null
}

function down_containers() {
  cd "$VAULT_WORKSPACE_DIR/vault-integration"
  docker-compose down --remove-orphans
  cd - &>/dev/null
}

function up_containers() {
  cd "$VAULT_WORKSPACE_DIR/vault-integration"
  docker-compose up --build -d
  cd - &>/dev/null
}

function sync_containers() {
  # if NO_PULL is set, skip the docker-compose pull phase
  if [[ -z "$NO_PULL" ]]; then
    cd "$VAULT_WORKSPACE_DIR/vault-integration"
    docker-compose pull
    cd - &>/dev/null
  fi
}

function wait_up_containers() {
  printf "\033[34m- waiting for containers to be healthy... \033[0m"
  while true; do
    unhealthy="$(docker ps --filter 'health=unhealthy' --filter 'health=starting' --format '{{.Names}}')"
    healthy="$(docker ps --filter 'health=healthy' --format '{{.Names}}')"

    # At least one docker container should be up and healthy,
    # + we wait until no container is unhealthy at which point the whole vault should be properly running
    if [ "${healthy}" = "" ]; then
      echo "No service started yet..."
    elif [ "${unhealthy}" = "" ]; then
      # We check on last time that the gate is up and ready
      if curl --connect-timeout 1 http://localhost:5000/ledger1/_health &>/dev/null ; then
        break
      else
        printf "\031All services healthy, but the gate is not responding properly!! \031[0m"
        exit 1
      fi
    fi
    printf "."
    sleep 2
  done
  echo "[OK]"
}

function reset_compartment() {
  hsmaas init --compartment-id "$VAULT_COMPARTMENT_ID" --clean
}

function display_env() {
  show_env VAULT_COMPARTMENT_ID 34
  show_env VAULT_HSM_ENDPOINT 32
  show_env VAULT_API_VERSION 35
  show_env HSM_DRIVER_VERSION 35
  show_env DEVICE_API_VERSION 35
  show_env WALLET_DAEMON_VERSION 35
}

function ensure_env_fetched() {
  mkdir -p "$VAULT_WORKSPACE_DIR"
  if ! command -v hsmaas &>/dev/null; then
    echo "hsmaas not found. installing..."
    pip3 install git+ssh://git@github.com/LedgerHQ/vault-scripts.git@master --user
  fi
  display_env
  sync_repo vault-integration         master
  sync_repo ledger-vault-api          "$VAULT_API_VERSION"
}

function copy_scenarios() {
  mkdir -p "$VAULT_WORKSPACE_DIR/scenarios"
  cp scripts/scenarios/* "$VAULT_WORKSPACE_DIR/scenarios"
}

function vault_compose() {
  cd "$VAULT_WORKSPACE_DIR/vault-integration"
  if ! [[ -d venv ]]; then
    python3 -m venv venv
    (
      # shellcheck disable=SC1091
      source venv/bin/activate
      pip install -r requirements.txt
    )
  else
    # shellcheck disable=SC1091
    source venv/bin/activate
  fi
  (
    # shellcheck disable=SC1091
    source venv/bin/activate
    ./vault_compose gen front
  )
}

function list_scenarios() {
  for filename in "$VAULT_WORKSPACE_DIR"/scenarios/*; do
    printf "     \033[34m%-22s\033[39m%s\n" "$(basename "$filename")" "$(grep DESC "$filename" | sed 's/^# DESC //g')"
  done
}

function ensure_set() {
  if [[ "${!1}" == "" ]]; then
    printf "\033[31merror: \$%s is not set\033[0m\n" "$1"
    exit 1
  fi
}

function sync_repo() {
  printf "\033[34m- syncing %s on branch \033[35m%s\033[34m... \033[0m" "$1" "$2"
  cd "$VAULT_WORKSPACE_DIR"
  if ! [[ -d "$1" ]]; then
    git clone "git@github.com:LedgerHQ/$1.git" >/dev/null
  fi
  cd "$1"
  branch=$(git branch | grep '\*' | cut -d ' ' -f 2)
  # if NO_CHECKOUT is set, skip the git checkout phase
  if [[ -z "$NO_CHECKOUT" ]]; then
    if [[ $branch != "$2" ]]; then
      git fetch >/dev/null
      git checkout "$2" >/dev/null
    fi
    git pull >/dev/null
  fi
  cd "$OLDPWD"
  echo "[OK]"
}

function show_env() {
  ensure_set "$1"
  printf "%-25s\033[%sm%s\033[0m\n" "$1" "$2" "${!1}"
}

function install_firmware() {
  CURRENT_FIRMWARE=$1
  EXPECTED_FIRMWARE=$2
  [[ "$CURRENT_FIRMWARE" == "" ]] && echo "No current firm given" && exit 1
  [[ "$EXPECTED_FIRMWARE" == "" ]] && echo "No expected firm given" && exit 1
  echo ""
  echo -e "\033[1m=> About to upgrade \033[33;1m$CURRENT_FIRMWARE\033[39;1m into \033[33;1m$EXPECTED_FIRMWARE\033[0m"
  echo ""
  cd "$VAULT_WORKSPACE_DIR"
  if ! [[ -d ledgerblue ]]; then
    virtualenv ledgerblue
    # shellcheck disable=SC1091
    source ledgerblue/bin/activate
    pip install ledgerblue
  else
    # shellcheck disable=SC1091
    source ledgerblue/bin/activate
  fi

  # shellcheck disable=SC2001
  EXPECTED_FIRMWARE_SANITIZED=$(echo "$EXPECTED_FIRMWARE" | sed 's/-/_/g')

  echo "installing osu..."
  do_install_firm "blue/${EXPECTED_FIRMWARE}/fw_${CURRENT_FIRMWARE}/upgrade_osu_${EXPECTED_FIRMWARE_SANITIZED}"

  echo "-------------------"
  echo "DEVICE IS REBOOTING"
  echo "-------------------"
  read -r -p "Press enter to continue when device is up"

  echo "installing firm..."
  do_install_firm "blue/${EXPECTED_FIRMWARE}/fw_${CURRENT_FIRMWARE}/upgrade_${EXPECTED_FIRMWARE_SANITIZED}"

  echo ""
  echo "Finished. Congratz."
}

function do_install_firm() {
  FIRM_TO_INST=$1
  python \
    -m ledgerblue.updateFirmware \
    --perso perso_11 \
    --url https://persov2.hsm.ledger.com/processUnsecured \
    --targetId 0x31010004 \
    --firmware "$FIRM_TO_INST" \
    --firmwareKey "${FIRM_TO_INST}_key" \
    --apdu
}

main "$@"
