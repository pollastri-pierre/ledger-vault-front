version: 2.1

aliases:
  - &docker_image circleci/node:8.11.3-stretch
  - &dev_s3_bucket ledger-vault-artifacts-dev
  - &prod_s3_bucket ledger-vault-artifacts-prod

jobs:
  run_tests:
    description: Build project
    docker:
      - image: *docker_image
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Install dependencies
          command: yarn
      - save_cache:
          key: node-v2-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run: npm run lint
      - run: ./node_modules/.bin/prettier -l "{src,webpack,test,cypress}/**/*.{js,json}"
      - run: npm run flow
      - run: npm run test
  e2e_tests:
    description: end to end testing with vault-integration
    machine:
      image: circleci/classic:201808-01
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Setup and run E2E tests
          command: bash ./scripts/setup-ci-e2e-tests.sh
      - run:
          name: Clean compartment
          command: |
            echo "Cleaning compartment $VAULT_COMPARTMENT_ID"
            ([[ $VAULT_COMPARTMENT_ID == "" ]] || [[ $COMPARTMENTS_ENDPOINT == "" ]]) && exit 0 || true
            curl -k --header "Content-Type: application/json" --request DELETE --data '{}' --cert vault-integration/hsm-circle-ci.pem "$COMPARTMENTS_ENDPOINT/$VAULT_COMPARTMENT_ID"
          when: always
  build:
    description: Build project
    docker:
      - image: *docker_image
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Build project
          command: npm run build
      - run:
          name: Create workspace
          command: mkdir -pv ~/workspace
      - run:
          name: Append commit sha in the deliverable
          command: echo "${CIRCLE_SHA1}" > dist/version
      - run:
          name: Create a archive containing all the artifacts
          command: tar -czvf ~/workspace/ledger-vault-front.tar.gz -C dist .
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ledger-vault-front.tar.gz
      - store_artifacts:
          path: ~/workspace
          destination: artifacts

  publish:
    description: Publish artifact on CircleCI and on S3
    parameters:
      s3_bucket:
        description: Bucket where artifacts will be stored
        type: string
      access_key:
        type: env_var_name
      secret_key:
        type: env_var_name
    docker:
      - image: *docker_image
    steps:
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get -q=2 update
            sudo apt-get -q=2 install awscli
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Set up AWS credentials
          command: |
            echo 'export AWS_ACCESS_KEY_ID="${<< parameters.access_key >>}"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="${<< parameters.secret_key >>}"' >> $BASH_ENV
      - run:
          name: Upload on AWS S3
          command: |
            s3_path="s3://<< parameters.s3_bucket >>/ledger-vault-front"
            artifact_with_sha1="ledger-vault-front_${CIRCLE_SHA1}.tar.gz"
            aws s3 cp --quiet ~/workspace/ledger-vault-front.tar.gz ${s3_path}/${artifact_with_sha1}
            eval echo 'export s3_path="${s3_path}"' >> $BASH_ENV
            eval echo 'export latest_artifact="${artifact_with_sha1}"' >> $BASH_ENV
      - run:
          name: Update the pointer "LATEST"
          command: |
            if [ "$CIRCLE_BRANCH" = "master" -o "$CIRCLE_BRANCH" = "develop-drop2" -o "$CIRCLE_BRANCH" = "develop-hsm2" -o "$CIRCLE_BRANCH" = "release_candidate_drop2" -o "$CIRCLE_BRANCH" = "develop" -o "$CIRCLE_BRANCH" = "release_candidate" ]; then
              latest=$(mktemp)
              echo $latest_artifact > $latest
              latest_pointer="latest-${CIRCLE_BRANCH}"
              if [ "${CIRCLE_BRANCH}" = "master" ]; then
                latest_pointer="latest"
              fi
              aws s3 cp --quiet $latest ${s3_path}/${latest_pointer}
              rm -f $latest
            fi

workflows:
  build_publish:
    jobs:
      - run_tests
      - e2e_tests:
          requires:
            - run_tests
      - build:
          requires:
            - run_tests
            - e2e_tests
      - publish:
          name: publish_dev
          s3_bucket: *dev_s3_bucket
          access_key: AWS_ACCESS_KEY_ID_DEV
          secret_key: AWS_SECRET_ACCESS_KEY_DEV
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - develop-drop2
                - develop-hsm2
                - release_candidate_drop2
      - publish:
          name: publish_prod
          s3_bucket: *prod_s3_bucket
          access_key: AWS_ACCESS_KEY_ID_PROD
          secret_key: AWS_SECRET_ACCESS_KEY_PROD
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - release_candidate
